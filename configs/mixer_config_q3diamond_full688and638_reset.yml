device:

    readout:
        trig_offset: 135 # [Clock ticks]
        lo_sideband: [1, -1, 1, 1] # whether taking the +/- sideband after LO
        frequency: [-66.29606008897868, -819.744416566195, 826.2459229939477, 94.86133332999998] # [MHz] max: 860 MHz, must be in separate bins = fs/16 (hi/lo power: 6.808, 5.794, 7.700, 6.966)
        # frequency_ef: [-67.5604563688476, -818.3165832328616, 823.0647139155917, 92.22599999666672]
        gain: [0.35, 0.18, 0.95, 0.8] # [MUX units: range -1 to 1, signed amplitude]
        readout_length: [5.5, 17.0, 8.0, 8.0] # [us]
        relax_delay: [300, 525, 300, 350] # [us]

    qubit:
        f_ge: [4113.006529393115, 3449.9674125304236, 4764.513490145146, 4382.565039033679] # [MHz]
        
        # f_ge: [4117.686452385398, 3445.1572577243646, 4767.054343954413, 4383.523802667161] # [MHz]
        f_ef: [3890.76069449181, 3349.253978410059, 4573.49228722234, 4211.781246834372] # [MHz]
        f_Q1_ZZ: [3445.1695202603087, 0, 3449.3409621315604, 3449.179169646872] # [MHz] frequency of Q1 when other qubits are in e
        f_Q_ZZ1: [4111.357154037054, 0, 4765.446645017305, 4379.754451085988] # [MHz] frequency of Qx when Q1 is in e
        f_EgGf: [2686.53594683, 0, 2033.76008793, 2414.92850999] # [MHz] expect to be ge_1 + ef_1 - ge_0; drive on Q1 to perform a swap with Qx
        # f_EgGf_Q: [-1, -1, 5887.94583, 5148.666667] # drive on Qx to perform a swap with Q1. For Q2: set Q0 in g before starting. For Q3: set Q0 in e before starting
        f_EgGf_Q: [0, 0, 5890.45, 5145.966666666667] # drive on Qx to perform a swap with Q1. For Q2: set Q0 in g before starting. For Q3: set Q0 in e before starting
        f_f0g1: [0, 1006.52, 0, 0] # [MHz] expect to be ge_1 + ef_1 - ge_0; drive on QX to perform a swap with resX
        gs: [53.81744103399963, 55.95274071800953, 44.5514225071792, 4.324246873301848, 2.3034231276846207, 6.286079155406997] # [MHz] g01, g12, g13, g02, g03, g23 from theoretical comparison for ZZ shift
        ZZs: [0.0, -5.247353163402295, -0.13680586790724192, -0.5636336744364598, -5.274533978365071, 0.0, -1.086931693679162, -1.3240606637937162, -0.1933299734719185, -1.1507608796036948, 0.0, -0.5657875072574825, -0.6456740735275162, -1.2034424973653586, -0.5890174608757661, 0.0]
        T1: [60, 105, 60, 65] # [us]

        pulses:
            pi_ge:
                gain: [20284, 22250, 11606, 3902]
                sigma: [0.020, 0.025, 0.010, 0.010] # [us]
                # half_gain: [None, None, None, None] # calibrate by using half of the sigma in us, then recalibrate the gain
                type: 'gauss'
            # pi_ge_crosstalk: # pulse to apply on Qx to cancel drive crosstalk during simultaneous pi_EgGf_Q pulses on Q2, Q3
            #     delta: [0, 50, 0, 0] # f_crosstalk - f_ge
            #     gain: [0, 100, 0, 0] 
            #     phase: [0, 0, 0, 0]
            #     type: 'flat_top'
            # pi_ge_adiabatic:
            #     gain: [-1, 25000, -1, -1]
            #     mu: [0, 6, 0, 0]
            #     beta: [0, 4, 0, 0]
            #     period: [0, 0.480, 0, 0]
            # pi_ge_IQ:
            #     gain: 1373
            pi_ge_slow:
                gain: [-1, 2198, -1, -1]
                sigma: [-1, 0.250, -1, -1] # [us]
                # half_gain: [None, None, None, None] # calibrate by using half of the sigma in us, then recalibrate the gain
                type: 'gauss'
            pi_ef:
                gain: [15339, 20435, 11776, 3484]
                sigma: [0.020, 0.020, 0.008, 0.008] # [us]
                type: 'gauss'
            pi_Q1_ZZ: # pi pulse length for Q1 when other qubits are in e
                gain: [24191, 0, 28104, 27927]
                sigma: [0.025, 0, 0.020, 0.020] # [us]
                # half_gain: [22516, None, None, None] # calibrate by using half of the sigma in us, then recalibrate the gain
                type: 'gauss'
            pi_Q1_ZZ_slow: # SLOW pi pulse length for Q1 when other qubits are in e
                gain: [2376, 0, -1, -1]
                sigma: [0.250, 0, -1, -1] # [us]
                type: 'gauss'
            pi_Q_ZZ1: # pi pulse length for Qx when Q1 in e
                gain:  [20048, 0, 11626, 3499]
                sigma: [0.020, 0, 0.010, 0.010] # [us]
                half_gain: [None, None, None, None] # calibrate by using half of the sigma in us, then recalibrate the gain
                type: 'gauss'
            pi_EgGf: # drive on Q1 to perform a swap with Qx
                gain: [32000, 0, 8000, 32000]
                sigma: [0.586, 0, 0.558, 0.44643] # [us], assume 3 clock cycle * 4 sigma ramp, this is the "total length" for a flat top pulse
                type: 'flat_top'
            pi_EgGf_Q: # drive on Qx to perform a swap with Q1. For Q2: set Q0 in g before starting. For Q3: set Q0 in e before starting
                # gain: [0, 0, 25933, 17833]
                # sigma: [0, 0, 0.2687588, 0.40046530] # [us], assume 3 clock cycle * 4 sigma ramp, this is the "total length" for a flat top pulse
                gain: [0, 0, 14650, 17166]
                sigma: [0, 0, 0.4113732195184582, 0.4092386326814445] # [us], assume 3 clock cycle * 4 sigma ramp, this is the "total length" for a flat top pulse
                type: 'flat_top'
            pi_f0g1: # drive on Qx to do an f0-g1 with Qx resonator (but we'll pretend we're going to Qx)
                gain: [0, 28000, 0, 0]
                sigma: [0, 2.4, 0, 0] # [us], assume 3 clock cycle * 4 sigma ramp, this is the "total length" for a flat top pulse
                type: 'flat_top'

hw:
    soc:
        dacs:
        # dac types: full (full gen - all gens in standard firmware) or int4, mux4 (q3diamond)
        # For mux4, all 4 readouts are on the same DAC (ch 6). Need to make sure none of the
        # 4 muxed readout freqs are not in the same bin, which are fs/16 wide
            qubit:
                ch: [0, 1, 2, 3]
                type: 'full'
                nyquist: [2, 2, 2, 2]
                mixer_freq: [0, 0, 0, 0]
            swap:
                ch: [1, 1, 1, 1]
                type: ['full', 'full', 'full', 'full']
                nyquist: [1, 1, 1, 1]
                mixer_freq: 0
            swap_Q:
                ch: [0, -1, 2, 3]
                type: ['full', None, 'full', 'full']
                nyquist: [2, 0, 2, 2]
                mixer_freq: 0
            readout:
                ch: 6
                type: 'mux4'
                mixer_freq: 950 # [MHz] freq to mix up
                nyquist: 1
                # mixer_freq: 6875 # [MHz] freq to mix up
                # mixer_freq: 5875 # [MHz] freq to mix up
                # nyquist: 2
            res_pump:
                ch: 4
                type: 'full'
                mixer_freq: 0 # [MHz] freq to mix up
                nyquist: 2
        adcs:
            readout:
                ch: [0, 1, 2, 3]
    lo:
        readout:
            frequency: 5925e6
            power: 15 # mixer wants 7 dBm
        twpa:
            frequency: 8215.0e6
            power: 8.0 # min -40, max +15 dBm

            # frequency: 8.500e9
            # power: 6.0 # min -40, max +15 dBm

            # # For Q1 only
            # frequency: 8449.0e6
            # power: -2.25 # min -40, max +15 dBm


aliases: # for use in instrument manager
    readout_LO: SC_26C1
    twpa_LO: SC_20A1
    soc: Qick187 # 10.108.30.52
    # soc: Qick60 # 10.108.30.60 BF1
    # soc: Qick233 # SLAC BF5 QRAM