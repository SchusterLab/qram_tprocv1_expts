device:

    readout:
        trig_offset: 145 # [Clock ticks]
        lo_sideband: [1, 1, 1, 1] # whether taking the +/- sideband after LO [we no longer have a readout LO]
        frequency: [-391.0489384211, 5794.889333329999, 501.37390000000005, -229.8457739] # [MHz] max: 860 MHz, must be in separate bins = fs/16 (hi/lo power: 6.808, 5.794, 7.700, 6.966)
        # frequency_ef: [-67.5604563688476, -818.3165832328616, 823.0647139155917, 92.22599999666672]
        # gain: [0.45, 0.55, 0.9, 0.53] # [MUX units: range -1 to 1, signed amplitude]
        gain: [0.48, 0.8, 0.95, 0.5] # [MUX units: range -1 to 1, signed amplitude]
        readout_length: [8.0, 7.0, 6.0, 9.0] # [us]
        # relax_delay: [300, 350, 300, 350] # [us]
        relax_delay: [450, 450, 450, 450] # [us]
    qubit:
        f_ge: [4109.191979657045, 3452.975577150007, 4763.932068792744, 4380.622407106254] # [MHz]
        f_ef: [3883.3488000631655, 3318.638485737792, 4576.568833764635, 4207.908734138744] # [MHz]
        f_Q1_ZZ: [3447.6492111444663, 0, 3451.6989648755653, 3451.487891370523] # [MHz] frequency of Q1 when other qubits are in e
        f_Q_ZZ1: [4104.0390507312995, 0, 4762.714105774562, 4379.368522661373] # [MHz] frequency of Qx when Q1 is in e
        f_EgGf: [2686.53594683, 0, 2017.3, 2414.92850999] # [MHz] expect to be ge_1 + ef_1 - ge_0; drive on Q1 to perform a swap with Qx
        f_EgGf_Q: [0, 0, 5885.4, 5138.925]
        # drive on Qx to perform a swap with Q1. For Q2: set Q0 in g before starting. For Q3: set Q0 in e before starting
        # f_EgGf_Q: [0, 0, 5883.96 , 5138.925] # [MHz
        f_f0g1: [0, 1006.52, 0, 0] # [MHz] expect to be ge_1 + ef_1 - ge_0; drive on QX to perform a swap with resX
        gs: [52.40296404695958, 54.81794456602636, 43.49513117058557, 4.930653352423196, 2.6415018214608046, 6.386231497692186] # [MHz] g01, g12, g13, g02, g03, g23 from theoretical comparison for ZZ shift
        ZZs: [0.0, -5.179338580947842, -0.155448999276814, -0.4803728057531771, -5.178529648655058, 0.0, -1.1287759175561405, -1.3398494225984905, -0.1292757291585076, -1.1016531500845304, 0.0, -0.47135359891763073, -0.4822364963183645, -1.253884444880896, -0.45079895509024936, 0.0]


        T1: [60, 105, 60, 65] # [us]

        pulses:
            pi_ge:
                gain: [1958, 1953, 8609, 7800]
                sigma: [0.020, 0.025, 0.015, 0.005] # [us]
                type: 'gauss'
            pi_ef:
                gain: [1341, 2203, 6303, 2709]
                sigma: [0.020, 0.025, 0.015, 0.010] # [us]
                type: 'gauss'
            pi_Q1_ZZ: # pi pulse length for Q1 when other qubits are in e
                gain: [2117, 0, 2499, 2473]
                sigma: [0.025, 0, 0.02, 0.02]
                # half_gain: [22516, None, None, None] # calibrate by using half of the sigma in us, then recalibrate the gain
                type: 'gauss'
            pi_Q1_ZZ_slow: # SLOW pi pulse length for Q1 when other qubits are in e
                gain: [100, 0, -1, -1]
                sigma: [0.250, 0, -1, -1] # [us]
                type: 'gauss'
            pi_Q_ZZ1: # pi pulse length for Qx when Q1 in e
                gain: [1957, 0, 12929, 3917]
                sigma: [0.02, 0, 0.01, 0.01]
                half_gain: [None, None, None, None] # calibrate by using half of the sigma in us, then recalibrate the gain
                type: 'gauss'
            # pi_ge_crosstalk: # pulse to apply on Qx to cancel drive crosstalk during simultaneous pi_EgGf_Q pulses on Q2, Q3
            #     delta: [0, 50, 0, 0] # f_crosstalk - f_ge
            #     gain: [0, 100, 0, 0] 
            #     phase: [0, 0, 0, 0]
            #     type: 'flat_top'
            # pi_ge_adiabatic:
            #     gain: [-1, 25000, -1, -1]
            #     mu: [0, 6, 0, 0]
            #     beta: [0, 4, 0, 0]
            #     period: [0, 0.480, 0, 0]
            # pi_ge_IQ:
            #     gain: 1373
            pi_ge_slow:
                gain: [-1, 100, -1, -1]
                sigma: [-1, 0.250, -1, -1] # [us]
                # half_gain: [None, None, None, None] # calibrate by using half of the sigma in us, then recalibrate the gain
                type: 'gauss'
            pi_EgGf: # drive on Q1 to perform a swap with Qx
                gain: [32000, 0, 30000, 32000]
                sigma: [0.586, 0, 0.8, 0.44643] # [us], assume 3 clock cycle * 4 sigma ramp, this is the "total length" for a flat top pulse
                type: 'flat_top'
            pi_EgGf_Q: # drive on Qx to perform a swap with Q1. For Q2: set Q0 in g before starting. For Q3: set Q0 in e before starting
                # gain: [0, 0, 25933, 17833]
                # sigma: [0, 0, 0.2687588, 0.40046530] # [us], assume 3 clock cycle * 4 sigma ramp, this is the "total length" for a flat top pulse
                gain: [0, 0, 12208, 22000]
                sigma: [0, 0, 0.4368, 0.32898] # [us], assume 3 clock cycle * 4 sigma ramp, this is the "total length" for a flat top pulse
                type: 'flat_top'
            pi_f0g1: # drive on Qx to do an f0-g1 with Qx resonator (but we'll pretend we're going to Qx)
                gain: [0, 28000, 0, 0]
                sigma: [0, 2.4, 0, 0] # [us], assume 3 clock cycle * 4 sigma ramp, this is the "total length" for a flat top pulse
                type: 'flat_top'
            
            pulse_pp:
                gain: [4200, 4100, 0, 0]
                filename: '240625_qram_4q_2qubit_++gg'
            pulse_1p:
                gain: [3000, 3400, 0, 0]
                filename: '240625_qram_4q_2qubit_e+gg'
            pulse_p1:
                gain: [2800, 4200, 0, 0]
                filename: '240625_qram_4q_2qubit_+egg'

hw:
    soc:
        dacs:
        # dac types: full (full gen - all gens in standard firmware) or int4, mux4 (q3diamond)
        # For mux4, all 4 readouts are on the same DAC (ch 6). Need to make sure none of the
        # 4 muxed readout freqs are not in the same bin, which are fs/16 wide
            qubit:
                ch: [0, 1, 2, 3]
                type: 'full'
                nyquist: [2, 2, 2, 2]
                mixer_freq: [0, 0, 0, 0]
            swap:
                ch: [1, 1, 1, 1]
                type: ['full', 'full', 'full', 'full']
                nyquist: [1, 1, 1, 1]
                mixer_freq: 0
            swap_Q:
                ch: [0, -1, 2, 3]
                type: ['full', None, 'full', 'full']
                nyquist: [2, 0, 2, 2]
                mixer_freq: 0
            readout:
                ch: [6, 4, 6, 6]
                type: ['mux4', 'full', 'mux4', 'mux4']
                mixer_freq: [7200, 0, 7200, 7200] # [MHz] freq to mix up
                nyquist: [2, 2, 2, 2]
            res_pump:
                ch: 4
                type: 'full'
                mixer_freq: 0 # [MHz] freq to mix up
                nyquist: 2
            delay_chs:
                ch: [0, 1, 2, 3, 4, 5, 6]
                delay_ns: [8.7, 8.5, 0, 7.6, 24, 20, 74]
        adcs:
            readout:
                ch: [0, 1, 2, 3]
    lo:
        twpa:
            frequency: 8180.0e6
            power: -1.9 # min -40, max +15 dBm
            # frequency: 8170.0e6
            # power: -1.6 # min -40, max +15 dBm
        readout:
            frequency: 0
            power: 0 # mixer wants 7 dBm

aliases: # for use in instrument manager
    readout_LO: SC_26C1
    twpa_LO: SC_20A1
    soc: Qick187 # 10.108.30.52
    # soc: Qick60 # 10.108.30.60 BF1
    # soc: Qick233 # SLAC BF5 QRAM